/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "keys_hu.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    behaviors {
        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        super_bspc: super_backspace {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp LA(BACKSPACE)>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        smart_shft: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LSHFT>, <&caps_word>;

            mods = <(MOD_LSFT)>;
        };

        comma_semi: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;

            mods = <(MOD_LSFT)>;
        };

        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;

            mods = <(MOD_LSFT)>;
        };

        qmrk_excl: qmrk_excl {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp EXCL>;

            mods = <(MOD_LSFT)>;
        };

        slh_morph: slh_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp BSLH>;

            mods = <(MOD_LSFT)>;
        };

        amps_morph: amps_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp AMPS>, <&kp PIPE>;

            mods = <(MOD_LSFT)>;
        };

        ht_left: ht_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 5 6 7 8 9 15 16 17 18 19 27 25 26 28 29 30 31 32 33 34 35>;
        };

        ht_right: ht_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33 34 35>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
  &kp Q             &kp W             &kp E            &kp R            &kp T          &kp Y      &kp U             &kp I             &kp O              &kp P
  &ht_left A LSHFT  &ht_left S LCTRL  &ht_left D LALT  &ht_left F LGUI  &kp G          &kp H      &ht_right J RGUI  &ht_right K RALT  &ht_right L RCTRL  &ht_right SEMI RSHFT
  &kp Z             &kp X             &kp C            &kp V            &kp B          &kp N      &kp M             &kp COMMA         &kp DOT            &kp FSLH
                                      &kp LGUI         &mo 1            &smart_shft    &kp SPACE  &mo 2             &super_bspc
            >;
        };

        num_layer {
            bindings = <
  &kp TILDE    &kp AT    &kp LBRC  &kp RBRC  &kp PRCNT    &kp STAR    &kp N7  &kp N8  &kp N9  &kp MINUS
  &kp CARET    &kp HASH  &kp LPAR  &kp RPAR  &kp DLLR     &kp UNDER   &kp N4  &kp N5  &kp N6  &kp PLUS
  &amps_morph  &kp LT    &kp LBKT  &kp RBKT  &kp GT       &slh_morph  &kp N1  &kp N2  &kp N3  &kp EQUAL
                         &trans    &trans    &trans       &kp N0      &trans  &trans
            >;
        };

        nav_layer {
            bindings = <
  &trans     &trans     &trans    &trans    &trans     &trans    &kp HOME  &kp END  &kp TAB    &super_bspc
  &sk LSHFT  &sk LCTRL  &sk LALT  &sk LGUI  &kp TAB    &kp LEFT  &kp DOWN  &kp UP   &kp RIGHT  &gresc
  &trans     &kp DEL    &trans    &trans    &trans     &trans    &kp RET   &trans   &trans     &trans
                        &trans    &trans    &trans     &trans    &trans    &trans
            >;
        };

        fun_layer {
            bindings = <
  &tog 0        &kp K_MUTE    &kp C_VOL_DN    &kp C_VOL_UP  &out OUT_TOG    &trans       &kp F7  &kp F8  &kp F9  &kp F12
  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2    &bt BT_SEL 3  &bt BT_SEL 4    &trans       &kp F4  &kp F5  &kp F6  &kp F11
  &bt BT_CLR    &kp C_PREV    &bt BT_CLR_ALL  &kp C_NEXT    &bootloader     &bootloader  &kp F1  &kp F2  &kp F3  &kp F10
                              &trans          &trans        &trans          &trans       &trans  &trans
            >;
        };
    };
};
