/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "keys_hu_101.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    behaviors {
        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        super_bspc: super_backspace {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp LA(BACKSPACE)>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        smart_shft: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LSHFT>, <&caps_word>;

            mods = <(MOD_LSFT)>;
        };

        comma_semi: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp HU_COMMA>, <&kp HU_SEMI>;

            mods = <(MOD_LSFT)>;
        };

        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp HU_DOT>, <&kp HU_COLON>;

            mods = <(MOD_LSFT)>;
        };

        qmrk_excl: qmrk_excl {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp HU_QMARK>, <&kp HU_EXCL>;

            mods = <(MOD_LSFT)>;
        };

        slh_morph: slh_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp HU_FSLH>, <&kp HU_BSLH>;

            mods = <(MOD_LSFT)>;
        };

        amps_morph: amps_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp HU_AMPS>, <&kp HU_PIPE>;

            mods = <(MOD_LSFT)>;
        };

        ht_left: ht_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 27 25 26 28 29 30 31 32 33 34 35>;
        };

        ht_right: ht_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <2 10 30 31 32 33 34 35 10 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
        };

        lang_hu_u: lang_hu_u {
            compatible = "zmk,behavior-tap-dance";
            label = "LANG_HU_U";
            #binding-cells = <0>;
            bindings =
                <&kp HU_U_ACUTE>,
                <&kp HU_U_UMLAUT>,
                <&kp HU_U_DOUBLE_ACUTE>;
        };

        lang_hu_o: lang_hu_o {
            compatible = "zmk,behavior-tap-dance";
            label = "LANG_HU_O";
            #binding-cells = <0>;
            bindings =
                <&kp HU_O_ACUTE>,
                <&kp HU_O_UMLAUT>,
                <&kp HU_O_DOUBLE_ACUTE>;
        };

        ht_left_layer: ht_left_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_LEFT_LAYER";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 30 31 32 33 34 35>;
        };

        ht_right_layer: ht_right_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_RIGHT_LAYER";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <2 10 30 31 32 33 34 35 10>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
  &kp HU_Q              &kp HU_W             &kp HU_E            &kp HU_R            &kp HU_T                 &kp HU_Y                &kp HU_U             &kp HU_I             &kp HU_O              &kp HU_P
  &ht_left LSHIFT HU_A  &ht_left LCTRL HU_S  &ht_left LALT HU_D  &ht_left LGUI HU_F  &ht_left_layer 4 HU_G    &ht_right_layer 4 HU_H  &ht_right RGUI HU_J  &ht_right RALT HU_K  &ht_right RCTRL HU_L  &ht_right HU_SEMI RSHIFT
  &kp HU_Z              &kp HU_X             &kp HU_C            &kp HU_V            &kp HU_B                 &kp HU_N                &kp HU_M             &kp HU_COMMA         &kp HU_DOT            &kp HU_FSLH
                                             &kp LGUI            &mo 1               &smart_shft              &kp SPACE               &mo 2                &super_bspc
            >;
        };

        num_layer {
            bindings = <
  &kp HU_TILDE  &kp HU_AT    &kp HU_LBRC  &kp HU_RBRC  &kp HU_PRCNT    &kp HU_STAR   &kp HU_N7  &kp HU_N8  &kp HU_N9  &kp HU_MINUS
  &kp HU_CARET  &kp HU_HASH  &kp HU_LPAR  &kp HU_RPAR  &kp HU_DLLR     &kp HU_UNDER  &kp HU_N4  &kp HU_N5  &kp HU_N6  &kp HU_PLUS
  &amps_morph   &kp HU_LT    &kp HU_LBKT  &kp HU_RBKT  &kp HU_GT       &kp RET       &kp HU_N1  &kp HU_N2  &kp HU_N3  &kp HU_EQUAL
                             &trans       &trans       &trans          &kp N0        &trans     &trans
            >;
        };

        nav_layer {
            bindings = <
  &trans     &trans     &trans    &trans    &trans     &trans    &kp HOME  &kp END  &kp TAB    &super_bspc
  &sk LSHFT  &sk LCTRL  &sk LALT  &sk LGUI  &kp TAB    &kp LEFT  &kp DOWN  &kp UP   &kp RIGHT  &gresc
  &trans     &kp DEL    &trans    &trans    &trans     &trans    &kp RET   &trans   &trans     &trans
                        &trans    &trans    &trans     &trans    &trans    &trans
            >;
        };

        fun_layer {
            bindings = <
  &tog 0        &kp K_MUTE    &kp C_VOL_DN    &kp C_VOL_UP  &out OUT_TOG    &trans       &kp F7  &kp F8  &kp F9  &kp F12
  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2    &bt BT_SEL 3  &bt BT_SEL 4    &trans       &kp F4  &kp F5  &kp F6  &kp F11
  &bt BT_CLR    &kp C_PREV    &bt BT_CLR_ALL  &kp C_NEXT    &bootloader     &bootloader  &kp F1  &kp F2  &kp F3  &kp F10
                              &trans          &trans        &trans          &trans       &trans  &trans
            >;
        };

        lang_hu {
            bindings = <
  &trans          &trans  &kp HU_E_ACUTE  &trans  &trans    &trans  &lang_hu_u  &kp HU_I_ACUTE  &lang_hu_o  &trans
  &kp HU_A_ACUTE  &trans  &trans          &trans  &trans    &trans  &trans      &trans          &trans      &trans
  &trans          &trans  &trans          &trans  &trans    &trans  &trans      &trans          &trans      &trans
                          &trans          &trans  &trans    &trans  &trans      &trans
            >;
        };
    };
};
